{
  "hash": "2af13d64b90fcb454e4352f0195ef051",
  "result": {
    "engine": "knitr",
    "markdown": "# Task Answers {#sec-tasks-answers}\n\n::: callout-note\n## Task answers\n\nThis page contains answers to the *Task* activities presented in selected chapters of the book.\n:::\n\n\n## From Chapter 2\n\n### Task 1 {.unnumbered}\n\nThe completed data description table for the Citibike stations dataset.\n\n<div style=\"font-size:0.99em;\">\n\n| Variable name  | Variable value   | Measurement level |\n|----------------|------------------|-------------------|\n| `name`         | \"Central Park\"   |  Categorical-nominal     |\n| `capacity`     |  80              |         Ratio          |\n| `rank_capacity`|  45              |      Ordinal     |\n| `date_opened`  |  \"2014-05-23\"    |        Interval           |\n| `longitude`    | -74.00149746     |         Interval          |\n| `latitude`     | 40.74177603      |           Interval        |\n\n</div>\n\n### Task 2 {.unnumbered}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # A tibble: 7 Ã— 3\n#   day   Customer Subscriber\n#   <ord>    <dbl>      <dbl>\n# 1 Sun     0.198       0.144\n# 2 Mon     0.137       0.163\n# 3 Tue     0.144       0.172\n# 4 Wed     0.104       0.125\n# 5 Thu     0.0973      0.122\n# 6 Fri     0.135       0.138\n# 7 Sat     0.185       0.136\n```\n:::\n\n\n\n\n\nCode for exploring the proportion of trips made by day of week on `user_type`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nny_temporal |> \n  group_by(day, user_type) |> \n  summarise(count=sum(count)) |> ungroup() |> \n  pivot_wider(names_from=user_type, values_from=count) |> \n  mutate(across(.cols=c(Customer, Subscriber), .fns=~.x/sum(.x)))\n```\n:::\n\n\n\n\n\n\n## From Chapter 3\n\n\n### Task 1 {.unnumbered}\n\nThe completed encoding description table for the Washington Post election map (@fig-wp-swing).\n\n<div style=\"font-size:0.99em;\">\n\n| Data item         | Measurement level | Visual mark  | Visual channel | Rank         |\n|-------------------|-------------------|--------------|----------------|--------------|\n| County location | `Interval`   | Lines | Position in x- y-   |  1 mag:order |\n| County winner             | `Cat-nominal`             | Lines       | Colour hue          |  2 id:category    |\n| County flip from 2012           | `Cat-ordinal`             | Lines       | 1D size          | 3 mag:order       |\n| County Swing fom 2012            | `Ratio`             | Lines        | Tilt/angle          | 4 mag:order        |\n| State 'winner'             |   `Cat-nominal`           | Polygon       | Colour hue          | 2 id:category       |\n\n\n</div>\n\n### Task 2 {.unnumbered}\n\nCode to produce a set of histograms similar to those in @fig-hist-region.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_gb |>\n  ggplot(mapping=aes(swing_con_lab)) +\n  geom_histogram(fill=\"#003c8f\") +\n  # Annotate with median Swing.\n  geom_vline(xintercept=4.44, size=.3)+\n  labs(x=\"Swing\", y=\"count\")+\n  facet_wrap(~region)\n```\n:::\n\n\n\n\n\n\n### Task 3 {.unnumbered}\n\nThe code to reproduce the graphic in @fig-scatters-con.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- \"#0575c9\"\nlab <- \"#ed1e0e\"\nother <- \"#bdbdbd\"\n\ndata_gb |>\n  mutate(is_flipped=seat_change_1719==\"Conservative gain from Labour\",\n         is_flipped=if_else(is.na(is_flipped), FALSE, is_flipped),\n         winner_19=case_when(\n           winner_19 == \"Conservative\" ~ \"Conservative\",\n           winner_19 == \"Labour\" ~ \"Labour\",\n           TRUE ~ \"Other\"\n         )) |>\n  ggplot(aes(x=con_17, y=con_19)) +\n  geom_point(aes(colour=winner_19, alpha=is_flipped, \n    shape=is_flipped)) +\n  geom_abline(intercept = 0, slope = 1, size=.3) +\n  scale_colour_manual(values=c(con,lab,other)) +\n  scale_alpha_ordinal(range=c(.5,1)) +\n  scale_shape_manual(values=c(21,19)) +\n  scale_x_continuous(limits=c(0,90)) +\n  labs(x=\"vote share 2017 \", y=\"vote share 2019\")\n```\n:::\n\n\n\n\n\n\n## From Chapter 4\n\n### Task 1 {.unnumbered}\n\nThe code to reproduce the heatmap in the left column of @fig-borough-freqs-resids.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector of vehicles in order they appear in graphic. \n# Convert vehicle_type to factor to effect ordering.\norder_type <- c(\"Car\", \"Taxi\", \"Bus\", \"Motorcycle\", \"Other\",\"Van\", \n  \"HGV\", \"Bicycle\") \n# For new is_inner variable used to facet plot.\ninner_boroughs <- c(\"Camden\", \"Greenwich\", \"Hackney\", \n  \"Hammersmith and Fulham\", \"Islington\",\"Kensington and Chelsea\", \n  \"Lambeth\", \"Lewisham\", \"Southwark\", \"Tower Hamlets\", \"Wandsworth\", \n  \"Westminster\", \"City of London\")\n# Staged dataset where signed-chi residuals are created.\nmodel_data <- ped_veh |> \n  filter(police_force == \"Metropolitan Police\" | \n    police_force == \"City of London\") |> \n  mutate(\n    is_inner=if_else(local_authority_district %in% \n      inner_boroughs, \"inner\", \"outer\"),\n    vehicle_type=factor(vehicle_type, levels=order_type)\n  ) |> \n  group_by(local_authority_district) |> \n  mutate(row_total=n()) |> ungroup() |> \n  group_by(vehicle_type) |> \n  mutate(col_total=n()) |> ungroup() |> \n  mutate(grand_total=n()) |> \n  group_by(local_authority_district, vehicle_type) |> \n  summarise(\n    observed=n(), row_total=first(row_total),  \n    col_total=first(col_total), grand_total=first(grand_total), \n    expected=(row_total*col_total)/grand_total, \n    resid=(observed-expected)/sqrt(expected),\n    is_inner=first(is_inner)\n  ) |>  ungroup() \n# Find max residual value to ensure colour scheme is symmetrical on 0.\nmax_resid <- max(abs(model_data$resid))\n\n# Plot heatmap.\nmodel_data |>   \n  ggplot(aes(x=vehicle_type, \n    y=reorder(local_authority_district, row_total))) +\n  geom_tile(aes(fill=resid), colour=\"#ffffff\", size=.4) +\n  facet_grid(is_inner~., scales=\"free_y\", space=\"free_y\") +\n  scale_fill_distiller(palette=\"RdBu\", direction=-1, \n    limits=c(-max_resid,max_resid)) +\n  guides(fill=\"none\")\n```\n:::\n\n\n\n\n\n\n### Task 2 {.unnumbered}\n\nThe code to reproduce the design challenge plots in @fig-age-imd-light.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate crash freqs by IMD class of location, \n# dark/daylight and casulty age.\nplot_data <- ped_veh |>\n  filter(\n    age_of_casualty>0, crash_quintile != \"Data missing or out of range\",  \n    light_conditions != \"Data missing or out of range\"\n    ) |>\n  mutate(is_daylight=factor(\n    if_else(light_conditions == \"Daylight\", \"daylight\", \"dark\"),\n                  levels=c(\"dark\", \"daylight\"))) |>\n  group_by(age_of_casualty, is_daylight, crash_quintile) |>\n  summarise(count=n()) |> ungroup() \n\n# Top plot.\nplot_data |>\n  ggplot(aes(x=age_of_casualty, y=count)) +\n  geom_col(aes(colour=is_daylight), width=1) +\n  facet_grid(is_daylight~crash_quintile, space=\"free_y\", \n    scales=\"free_y\", labeller=labeller(c(\"daylight\", \"dark\"))) +\n  scale_colour_manual(values=c(\"#08519c\", \"#c6dbef\"), guide=\"none\")+\n  labs(y=\"crash count in hundreds\", x=\"casualty age\") +\n  scale_y_continuous(\n    breaks=c(c(2,4,6,8,10)*100),\n    labels = scales::comma_format(scale = .01))\n\n# Bottom plot.\nplot_data |> \n  # Calcuate % crashes in daylight and expected daylight counts \n  # in each data item from this.\n  mutate(total=sum(count)) |> \n  pivot_wider(names_from=is_daylight, values_from=count) |> \n  mutate(\n    prop_daylight=sum(daylight, na.rm=TRUE)/first(total),\n    expected_daylight=(daylight+dark)*prop_daylight\n  ) |> \n  pivot_longer(cols=c(dark, daylight), \n    names_to=\"is_daylight\", values_to=\"count\") |> \n  # Plot.\n  ggplot(aes(x=age_of_casualty, y=count)) +\n  geom_col(aes(colour=is_daylight), width=1) +\n  geom_line(aes(y=expected_daylight, group=crash_quintile), \n    colour=\"#737373\", linewidth=.4) +\n  facet_wrap(~crash_quintile, \n    labeller=labeller(c(\"daylight\", \"dark\")), nrow=1) +\n  scale_colour_manual(values=c(\"#08519c\", \"#c6dbef\"), guide=\"none\")+\n  labs(y=\"crash count in hundreds\", x=\"casualty age\") +\n  scale_y_continuous(\n    breaks=c(c(4,8,12)*100), \n    labels = scales::comma_format(scale = .01))\n```\n:::\n\n\n\n\n\n\n## From Chapter 5\n\n### Task 1 {.unnumbered}\n\n* For jobs filled in the City of London (CoL), from which borough does the largest number of workers commute? \n  + Answer: Wandsworth (Wnd)\n\n* For jobs filled in Camden (Cmd), from which borough does the largest number of workers commute? \n  + Answer: Barnet (Barnt), maybe Islington (Isl)\n\n* Eyeballing the graphic, identify the top 3 boroughs which appear to have the most localised labour markets in terms of in-commuting. \n  + Answer: Bexleyheath (Bxl), Havering (Hvr), Barking and Dagenham (BaD). Also, Sutton (Sttn), Grenwich (Grn) look very localised.\n\n\n## From Chapter 6\n\nThe code to reproduce the annotated parallel-coordinate-plot in @fig-pcps.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List of variables ordered ascending by correlation with leave.\norder_vars <- cons_data |>\n  mutate(across(c(younger:heavy_industry), ~(.x-mean(.x))/sd(.x))) |> \n  pivot_longer(cols=younger:heavy_industry, \n    names_to=\"expl_var\", values_to=\"prop\") |> \n  group_by(expl_var) |>  \n  summarise(cor=cor(leave,prop)) |> ungroup() |> arrange(cor) |>  \n  pull(expl_var)\n\n# Staged dataset of z-score transformed variables and variables \n# identifying extreme Leave/Remain constituencies for highlighting.\nplot_data <- cons_data |> \n  mutate(\n    majority=if_else(leave>.5, \"Leave\", \"Remain\"),\n    across(c(leave, younger:heavy_industry), ~(.x-mean(.x))/sd(.x)),\n    decile=ntile(leave, 10), is_extreme=decile > 9 | decile < 2\n  )  |> \n  select(\n    majority, is_extreme, decile, constituency_name, leave, degree, \n    professional,  younger, eu_born, no_car, white, own_home, christian, \n    not_good_health, heavy_industry) |>  \n  # Change polarity in selected variables.\n  mutate(degree=-degree, professional=-professional, younger=-younger, \n    eu_born=-eu_born, no_car=-no_car) |>  \n  pivot_longer(cols= c(leave:not_good_health), \n    names_to=\"var\", values_to=\"z_score\") |> \n  # Explanatory variable as factor ordered according to known assocs \n  # with Leave.\n  mutate(\n    var=factor(var, levels=c(\"leave\", order_vars)),\n    var=fct_rev(var)\n  ) \n# Sample extreme constituencies, for Leave and Remain,\n# each time plot is built.\nannotate_data <- plot_data |> \n  filter(is_extreme) |> \n  group_by(decile) |> \n  sample_n(1) |> pull(constituency_name)\n\nplot_data |>  \n  ggplot(aes(x=var, y=z_score, colour=majority, \n    group=c(constituency_name))) +\n  geom_path(alpha=0.15, linewidth=.2) +\n  # Highlight extreme remain/leave constituencies.\n  geom_path(data= . %>% \n    filter(constituency_name %in% annotate_data),\n    alpha=1, linewidth=.4) +\n  geom_text(\n    data= . %>% \n      filter(constituency_name %in% annotate_data, var==\"leave\"),\n    aes(x=\"leave\", y=z_score, label=str_wrap(constituency_name,15)), \n    size=3.5, vjust=\"top\", hjust=\"centre\", nudge_x=+.5\n    ) +\n  scale_colour_manual(values=c(\"#b2182b\",\"#2166ac\")) +\n  coord_flip()\n```\n:::\n\n\n\n\n\n\n\n<!-- ```{=latex}\n\\phantomsection\n\\chapter*{References}\n```\n\n\n```{=latex}\n\\phantomsection\n\\addcontentsline{toc}{chapter}{Index}\n\\printindex\n``` -->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}