{
  "hash": "c3cd78f4c99e27cc4c3c97cbe9149ef1",
  "result": {
    "engine": "knitr",
    "markdown": "# Geographic Networks {#sec-network}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nBy the end of this chapter you should gain the following knowledge and practical skills.\n\n::: {.callout-note}\n\n## Knowledge\n\n- [ ] Understand the special structure and vocabulary used to represent network data.\n- [ ] Appreciate the strengths, weaknesses and trade-offs of network visualizations.\n- [ ] Learn design approaches for incorporating geographic context into network visualization.\n\n:::\n\n\n::: {.callout-note}\n\n## Practical skills\n\n- [ ] Generate semi-spatial gridmap layouts using the `gridmappr` package.\n- [ ] Write `ggplot2` specifications to generate gridmaps: geographically arranged bar charts and full origin-destination maps (OD maps).\n- [ ] Write code to generate model-expected values to emphasise different structure and patterns in OD maps.\n\n:::\n\n## Introduction\n\n\\index{networks}\nNetworks are a special class of data used to represent things, entities, and how they relate to one another. Network data consist of two types of element: *nodes*, the entities themselves, and *edges*, the connections between nodes. Both nodes and edges can have additional information attached to them -- counts, categories and directions. Network data are cumbersome to work with in R as they are not represented well  by flat data frames. A common workflow is to split the data across two tables -- one representing nodes and one representing edges [@wickham_ggplot2_2020].\n\nA category of network data used heavily in geospatial analysis is origin-destination (OD) \\index{origin-destination} data describing, for example, flows of bikes [@beecham_connected_2023] and commuters [@beecham_characterising_2019] around a city. These data consist of *nodes*, origin and destination locations, and *edges*, flows between origins and destinations. While statistics from Network Science can and have been deployed in the analysis of geospatial OD data [@yang_understanding_2022], visualization techniques provide much assistance in exposing the types of complex structural patterns and relations inherent in geographic flow data.\n\nIn this chapter we will work with an accessible and widely used OD network dataset: Census travel-to-work data \\index{datasets!Census} recording counts of individuals commuting between Census geographies of the UK based on their home and workplace. Specifically, we will work with data in London recording travel-to-work between the city's 33 boroughs.\n\n\n## Concepts\n\n### Node summary\n\nThe *nodes* in this dataset are London's 33 boroughs, and the *edges* are directed OD pairs between boroughs. In @fig-flows-bor frequencies of the number of jobs available in each borough and workers living in each borough (the nodes) are represented. Note that job-rich boroughs in central London -- Westminster, City of London -- contain many more jobs than workers residing in them. We can infer that there is a high level of in-commuting to those boroughs and the reverse, a high level of out-commuting, for worker-rich boroughs containing larger numbers of workers relative to jobs.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Barchart of jobs and workers contained in London boroughs.](figs/05/flows-bor.png){#fig-flows-bor width=90%}\n:::\n:::\n\n\n\n\n### Node-link representations\n\nThe most common class of network visualization used to represent network data are node-link diagrams. These depict graphs in two dimensions as a force-directed layout. Nodes are positioned such that those sharing greater connection -- edges with greater frequencies -- are closer than those that are less well-connected -- that do not share edges with such large frequencies. Edges are drawn as lines connecting nodes, and so *node-link* diagrams.\n\n\\index{commuting|(} The left graphic in @fig-lines-geog uses a force-directed layout \\index{force-directed layout} to represent the travel-to-work data. Nodes, London boroughs, are sized according to the number of jobs and workers they contain and edges, commuters between boroughs, are represented as lines sized by commuter frequency. As is often the case with node-link diagrams, the graphic looks complex. Job-rich boroughs, Westminster and City of London, are labelled and have many connecting lines -- most likely  workers commuting in from other London boroughs. Other more 'residential' boroughs are labelled. Lambeth and Wandsworth, for example, contain many connecting lines --  likely residents commuting out to other London boroughs for work. That these boroughs are close in geographic space as well as force-directed space suggests that between-borough commuting is spatially dependent.\n\nTo investigate this more directly, it makes sense to *position* nodes (boroughs) with a geographic arrangement.  In the right of @fig-lines-geog, boroughs are placed in their exact geographic position (geometric centroid of boroughs) and line width and colour are used to encode edge (commuter flow) frequency. Boroughs are again represented with circles sized according to frequency (the total number of jobs and workers contained in the borough), and commuter flow *direction* is encoded by making lines asymmetric, following @wood_visualizing_2011: the straight ends are origins, the curved ends destinations. \\index{maps!flowmaps} \\index{maps!bezier flowlines}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Flowlines with edges showing frequencies between London boroughs.](figs/05/flowlines.png){#fig-lines-geog width=100%}\n:::\n:::\n\n\n\n\nThe geographic positioning of boroughs adds context, and the encoding of direction provides further detail. For example, the pattern of commuting into central London boroughs versus more peripheral boroughs, with asymmetric commuter flows into Westminster, is just about detectable, and a more symmetric pattern between outer London boroughs is somewhat easier to see. However, there are problems that affect the usefulness of the graphic. Self-contained flows -- where individuals live and work in the same borough -- are not shown. The graphic is cluttered with a 'hairball' effect due to multiple overlapping lines. Longer flows appear more visually dominant than do shorter flows, an unhelpful artefact of the encoding. Also, aggregating to the somewhat arbitrary geometric centre of boroughs and drawing lines between these locations implies an undue level of spatial precision; the pattern of commuting would likely look different were individual flows encoded with precise OD locations of home and workplace.\n\n### Origin-Destination matrices\n\nAn alternative way to represent commuter flow frequencies is as an origin-destination matrix, as in @fig-reordered-matrix. The columns are destinations, London boroughs into which residents commute for work; the rows are origins, London boroughs from which residents commute out for work. Commute frequencies are encoded using colour value -- the darker the colour, the larger the number of commutes between those boroughs. Boroughs are ordered left-to-right and top-to-bottom according to the total number of jobs accessed in each borough.\n\nWhile using colour lightness rather than line width to show flow magnitude is a less effective encoding channel [following @munzner_visualization_2014], there are obvious advantages. The salience bias \\index{salience bias} of longer flows is removed -- every OD pair, 1039 in total ($33^2$), is given equal graphic saliency. Ordering cells of the matrix by destination size (number of jobs accessed in each borough) helps to emphasise patterns in the job-rich boroughs, but also encourages within and between borough comparison. For example, the lack of colour outside of the diagonals in the less job-rich boroughs, which also tend to be in outer London, suggests that labour markets there might be more self-contained. By applying a local scaling on destination (right plot),  we can explore commutes into individual boroughs in a more detailed way. The vertical strips of blue for other job-rich central and inner London boroughs (Hammersmith & Fulham and Kensington & Chelsea), suggesting reasonably high-levels of in-commuting to access jobs there.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Origin-destination matrices ordered according to borough size on number of jobs. In the right graphic a separate 'local' colour scale is created for each destination borough.](figs/05/matrices.png){#fig-matrices width=100%}\n:::\n:::\n\n\n\n\n\n### Origin-Destination maps\n\nThe OD matrices expose new structure that could not be so easily inferred from the node-link visualizations. For phenomena such as commuting, however, the fact that geographic context is missing is a pitfall. OD maps [@wood_visualisation_2010] are a form of matrix that make better use of layout and position to support this spatial dimension of analysis. They take a little to get your head around, but the idea is elegant.\n\nOD maps contains exactly the same cells as an \\index{origin-destination} \\index{origin-destination matrix} OD matrix, but the cells are re-ordered with an approximate geographic arrangement, as in the right column of @fig-reordered-matrix. So, for example, we may be interested in focussing on *destination*, or workplace, boroughs. In the first highlighted example, commutes into Westminster are considered (the left-most column of the OD matrix). Cells in the highlighted column are coloured according to the number of workers resident in each borough that travel into Westminster for work. In the map to the right, these cells are then re-ordered with an approximate spatial arrangement. The geographic ordering allows us to see that residents access jobs in Westminster in large numbers from many boroughs in London, but especially from Wandsworth (Wns), Lambeth (Lmb) and Southwark (Sth) to the south of Westminster (Wst). \n\nIn the second example -- the middle row of the matrix -- we focus on *origins*: specifically, commutes out of Hackney. Cells in the highlighted row are coloured according to the number of jobs accessed in each borough by residents living in Hackney, but travelling out of that borough for work. Cells are again reordered in the inset map. This demonstrates that commuting patterns are reasonably localised. The modal destination/workplace borough remains Westminster, but relatively large numbers of jobs are accessed in Camden (Cmd), Islington (Isl), Tower Hamlets (TwH) and the City of London (CoL) by residents living in Hackney.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Origin-destination matrices: highlighted destination (Westminster) and origin (Hackney) with geospatial arrangement.](figs/05/reordered_matrix.png){#fig-reordered-matrix width=100%}\n:::\n:::\n\n\n\n\nOD maps extend this idea by displaying *all cells* of the OD matrix with a geographic arrangement. This is achieved via a 'map-within-map' layout (@fig-map-map), made possible by the fact that the gridded arrangement contains regularly-sized cells. \\index{maps!gridmaps} \\index{packages!\\texttt{gridmappr}} \\index{maps!OD maps|(}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Map-witin-map layout required for OD maps. The approximate spatial arrangement is created by the `gridmappr` package [@beecham_gridmappr_2023].](figs/05/map_map.png){#fig-map-map width=100%}\n:::\n:::\n\n\n\n\n@fig-odmap is a destination-focussed OD map (D-OD). Each larger reference cell identifies destinations, and the smaller cells are coloured according to origins -- the number of residents in each borough commuting into the reference cell for work. The map uses a local colour scaling, with same origin-destination cells greyed out. Flow counts are summarised over each reference borough (destination in this case) and normalised according to the maximum flow count for that reference borough. \n\nThe local scaling allows us to characterise the geography of commuting into boroughs in some detail. The two job-rich boroughs, Westminster and City of London, clearly draw workers in large proportions across London boroughs, and to a lesser extent this is the case for other central/inner boroughs such as Islington (Isl), Camden (Cmd) and Tower Hamlets (TwH). For outer London boroughs, commuting patterns are more localised. Large numbers of available jobs are filled by workers living in neighbouring boroughs.  Readers familiar with London's geography may notice that inner London boroughs south of the river -- Lambeth (Lam), Wandsworth (Wnd), Southwark (Sth) -- tend to draw workers in greater number from boroughs that are also south of the river.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Destination-focussed OD map of commutes between London boroughs, with local scaling.](figs/05/od_map.png){#fig-odmap width=100%}\n:::\n:::\n\n\n\n\n\n::: {.callout-tip icon=\"false\"}\n## Task 1\n| Although OD maps overcome several problems of flow-line based visualizations and share several of the characteristics of effective data graphics discussed in Chapter [-@sec-visual], they do require some interpretation, especially when seen for the first time.\n| \n| Test your knowledge by studying @fig-odmap and completing the following look-up tasks:\n| \n* For jobs filled in the City of London (CoL) from which borough does the largest number of workers commute?\n\n* For jobs filled in Camden (Cmd) from which borough does the largest number of workers commute? \n \n* Eyeballing the graphic, identify the top 3 boroughs which appear to have the most localised labour markets in terms of in-commuting.\n\n:::\n\n\n\\index{maps!OD maps|)}\n\n\n\n## Techniques\n\nThe technical element to this chapter continues in our analysis of 2011 Census travel-to-work data. After importing the dataset, we will organise flow data into nodes and edges before creating graphics that summarise over the nodes, London boroughs, and reveal spatial structure in the edges, OD commuter flows between boroughs. A focus for the analysis is on how the geography of travel-to-work varies by occupation type.\n\n\n### Import\n\n* Download the `05-template.qmd`[^05-template] file for this chapter and save it to your `vis4sds` project.\n* Open your `vis4sds` project in RStudio and load the template file by clicking `File` > `Open File ...` > `05-template.qmd`.\n\n[^05-template]: `https://vis4sds.github.io/vis4sds/files/05-template.qmd`\n\nA `.csv` file containing Census travel-to-work data in London has been stored in the book's accompanying data repository^[https://github.com/vis4sds/data]. Code for downloading the data is in  the template file.  The data can then be read into your session in the usual way.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in local copies of the Census travel-to-work data.\nod_pairs <- read_csv(here(\"data\", \"london_ttw.csv\"))\n```\n:::\n\n\n\n\nIn order to generate an approximate geographic arrangement of London boroughs we will use the `gridmappr` R package \\index{packages!\\texttt{gridmappr}|(} \\index{maps!gridmaps|(}  [@beecham_gridmappr_2023]. The development version can be downloaded with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"rogerbeecham/gridmappr\")\n```\n:::\n\n\n\n\nThe `od_pairs` dataset is in @tbl-census-ods-tex. Each observation is a unique OD pair summarising the total number of recorded commuters between a pair of London boroughs for a stated occupation type.\n\n\n\n\n\n::: {#tbl-census-ods .cell tbl-cap='Census OD travel-to-work data: edges (OD flows) table.'}\n\n:::\n\n::: {#tbl-census-ods-tex .cell tbl-cap='Census OD travel-to-work data: edges (OD flows) table.'}\n::: {.cell-output-display}\n\\begin{table}\n\\centering\\begingroup\\fontsize{9}{11}\\selectfont\n\n\\begin{tabular}[t]{l|l|l|l|>{}l}\n\\hline\no\\_bor & d\\_bor & occ\\_type & count & is\\_prof\\\\\n\\hline\nBarnet & Westminster & 1\\_managers\\_senior & 2733 & \\texttt{TRUE}\\\\\n\\hline\nBarnet & Westminster & 2\\_professional & 4055 & \\texttt{TRUE}\\\\\n\\hline\nBarnet & Westminster & 3\\_associate\\_professional & 2977 & \\texttt{TRUE}\\\\\n\\hline\nBarnet & Westminster & 4\\_administrative & 2674 & \\texttt{FALSE}\\\\\n\\hline\nBarnet & Westminster & 5\\_trade & 687 & \\texttt{FALSE}\\\\\n\\hline\nBarnet & Westminster & 6\\_caring\\_leisure & 755 & \\texttt{FALSE}\\\\\n\\hline\nBarnet & Westminster & 7\\_sales\\_customer & 1255 & \\texttt{FALSE}\\\\\n\\hline\nBarnet & Westminster & 8\\_machine\\_operatives & 257 & \\texttt{FALSE}\\\\\n\\hline\nBarnet & Westminster & 9\\_elementary & 1309 & \\texttt{FALSE}\\\\\n\\hline\n... & ... & ... & ... & ...\\\\\n\\hline\n\\end{tabular}\n\\endgroup{}\n\\end{table}\n\n\n:::\n:::\n\n\n\n\n\nNodes in the dataset are the 33 London boroughs. We can express commuters between these nodes in different ways, according to whether nodes are destinations or origins. In the code below, two tables are generated with OD data grouped by destination (`nodes_d`) and origin (`nodes_o`) and commuters into- and out of- boroughs counted respectively. These two data sets are then combined with `bind_rows()` and distinguished via the variable name `type`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_d <- od_pairs |>\n  group_by(d_bor, occ_type) |>\n  summarise(count = sum(count), is_prof = first(is_prof)) |> \n  ungroup() |> rename(la = d_bor) |>\n  mutate(type=\"jobs\")\n\nnodes_o <- od_pairs |>\n  group_by(o_bor, occ_type) |>\n  summarise(count = sum(count), is_prof = first(is_prof)) |> \n  ungroup() |> rename(la = o_bor) |>\n  mutate(type=\"workers\")\n\nnodes  <- bind_rows(nodes_o, nodes_d)\n```\n:::\n\n::: {#tbl-nodes-table .cell tbl-cap='Census OD travel-to-work data: nodes (boroughs) table.'}\n\n:::\n\n\n\n\n<!-- \n\n\n\n::: {#tbl-nodes-table-tex .cell tbl-cap='Census OD travel-to-work data: nodes (boroughs) table.'}\n::: {.cell-output-display}\n\\begin{table}\n\\centering\\begingroup\\fontsize{9}{11}\\selectfont\n\n\\begin{tabular}[t]{>{\\raggedright\\arraybackslash}p{55%}|>{\\raggedright\\arraybackslash}p{15%}|>{\\raggedright\\arraybackslash}p{15%}|l}\n\\hline\nlocal_authority & is\\_prof & count & type\\\\\n\\hline\nBarking and Dagenham & TRUE & 3745 & workers\\\\\n\\hline\nBarking and Dagenham & TRUE & 7841 & workers\\\\\n\\hline\nBarking and Dagenham & TRUE & 5243 & workers\\\\\n\\hline\nBarking and Dagenham & FALSE & 8592 & workers\\\\\n\\hline\nBarking and Dagenham & FALSE & 3990 & workers\\\\\n\\hline\nBarking and Dagenham & FALSE & 6635 & workers\\\\\n\\hline\nBarking and Dagenham & FALSE & 5797 & workers\\\\\n\\hline\nBarking and Dagenham & FALSE & 4396 & workers\\\\\n\\hline\nBarking and Dagenham & FALSE & 7998 & workers\\\\\n\\hline\nBarking and Dagenham & TRUE & 2667 & jobs\\\\\n\\hline\n... & ... & ... & ...\\\\\n\\hline\n\\end{tabular}\n\\endgroup{}\n\\end{table}\n\n\n:::\n:::\n\n\n\n -->\n\n### Gridmap layout\n\nWe will analyse over the travel-to-work data by laying out data graphics with a geospatial arrangement. Such arrangements can be automatically created using the `gridmappr` R package [@beecham_gridmappr_2023]. Given a set of point locations, the package creates a two-dimensional grid of user-specified dimensions and allocates points to the grid such that the distance between points is minimised. \n\nThe main function to call is `points_to_grid()`.  This takes a data frame of geographic points and returns corresponding grid cell positions (*row* and *column* identifiers). In the code below an 8x8 grid is used. The allocation is also constrained by a *compactness* parameter which determines the extent to which points are allocated to cells in the centre (compactness = 1), edges (0) or scaled geographic location (0.5) within the grid.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gridmappr)\nn_row <- 8\nn_col <- 8\npts <- london_boroughs |> st_drop_geometry() |> \n  select(area_name, x = easting, y = northing)\nsolution <- points_to_grid(pts, n_row, n_col, compactness = .6)\n```\n:::\n\n\n\n\nOnce a layout is generated, we create a corresponding polygon object so that the gridmap can be plotted. This is achieved with `make_grid()`. This function takes an `sf` \\index{packages!\\texttt{simple features}} data frame containing polygons with 'real' geography and returns an `sf` data frame representing a grid, with variables identifying column and row IDs (bottom left is origin) and geographic centroids \\index{maps!OS British National Grid} of grid squares. The gridded object can then be joined on a gridmap solution returned from `points_to_grid()` in order to create an object in which each grid square corresponds to a gridmap cell position.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid <- make_grid(london_boroughs, n_row, n_col) |>\n  inner_join(solution)\n```\n:::\n\n\n\n\n To evaluate different layouts that could be generated from differently specified grid dimensions and/or compactness values, it can be useful to show the geographic distortion introduced when moving centroids to regularly sized grid cells. In the example below, displacement vectors are drawn connecting the centroid of each borough in London in *real* and *grid* space. This is achieved with `get_trajectory()` from the `odvis` \\index{packages!\\texttt{odvis}} package.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Displacement vectors showing distortion introduced by candidate gridmap layouts.](figs/05/displacements.png){#fig-displacements width=100%}\n:::\n:::\n\n\n\n\nThe code is slightly more advanced. Some concepts, for example functional-style programming with `map()`, are introduced properly in later chapters. First, we combine the real and grid geographies in a single data frame.  Then we `map()` over each real-to-grid location pair calling `get_trajectory()` to generate a data frame of trajectories – origins, destinations and control points, which affect the path of the vectors so that they curve towards the destination. Finally trajectories are plotted via `geom_bezier()`, with separate lines (`group=`) for each real-to-grid OD pair.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install odvis.\ndevtools::install_github(\"rogerbeecham/odvis\")\nlibrary(odvis)\n\n# Combine the grid and london_boroughs (real geography)\n# objects into a single simple features data frame.\nlon_geogs <- bind_rows(\n  london_boroughs |> mutate(type = \"real\") |> \n    select(area_name, x = easting, y = northing, type),\n  grid |>  mutate(type = \"grid\") |> \n    select(area_name, x, y, type, geometry = geom)\n)\n\n# Create points for drawing trajectories\n# -- origin, destination and control point locations.\ntrajectories <- lon_geogs |> st_drop_geometry() |> \n  filter(!is.na(area_name)) |>\n  pivot_wider(names_from = type, values_from = c(x, y)) |>\n  mutate(id = row_number()) |>\n  nest(data = c(area_name, x_real, y_real, x_grid, y_grid)) |>\n  mutate(trajectory = map(data, \n    ~get_trajectory(\n      .x$x_real, .x$y_real, .x$x_grid, .x$y_grid, .x$area_name\n      ))\n      ) |>\n  select(trajectory) |>\n  unnest(cols = trajectory)\n\n# Plot displacement vectors.\nggplot() +\n  geom_sf(\n    data = lon_geogs |> \n      mutate(type = factor(type, levels = c(\"real\", \"grid\"))),\n    aes(fill = type, colour = type), linewidth = .2) +\n  ggforce::geom_bezier(\n    data = trajectories,\n    aes(x = x, y = y, group = od_pair), \n      colour = \"#08306b\", linewidth = .4\n    ) +\n  scale_fill_manual(\n    values = c(\"#f0f0f0\", \"transparent\"), guide = \"none\") +\n  scale_colour_manual(\n    values = c(\"#FFFFFF\", \"#525252\"), guide = \"none\") +\n  theme_void()\n```\n:::\n\n\n\n\nOnce a gridmap polygon file (`grid`) and corresponding cell positions (`row` and `col`) are generated, gridmaps can be plotted from the polygon file directly, as in plot *(a)* of @fig-map-code, by supplying grid square positions to `facet_grid()`, plot *(b)*, or combining both to effect a map-within-map layout for OD maps, plot *(c)*.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![ggplot2 code for plotting gridmap layouts.](figs/05/map_map_code_ann_new.png){#fig-map-code width=100%}\n:::\n:::\n\n\n\n\n\n\\index{packages!\\texttt{gridmappr}|)}\n\n### Analysing over nodes\n\nIn @fig-nodes-summary are gridmaps summarising over the nodes (boroughs). The number of workers living in each borough (left column) and jobs available in each borough (right column) is encoded using circle size, with circles positioned in *x*, *y* at the centroids of the grid squares. Frequencies are shown separately for *professional* and *non-professional* occupation types. If you are familiar with London's social geography, the patterns can be understood. There are comparatively more  non-professional workers living in the somewhat more affordable boroughs in outer and east London; and job-rich central London boroughs -- Westminster Wst, Camden Cmd, City of London CoL, Tower Hamlets TwH -- provide a large number of *professional* jobs.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Workers and jobs in London borough by occupation class. Bar counts are scaled locally by borough.](figs/05/nodes_summary.png){#fig-nodes-summary width=100%}\n:::\n:::\n\n\n\n\n\n\nThe code for @fig-nodes-summary:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid |>\n  inner_join(nodes |> group_by(la, is_prof, type) |> \n    summarise(count=sum(count)),\n    by = c(\"area_name\" = \"la\")\n    ) |>\n  mutate(\n    is_prof = \n    factor(if_else(is_prof, \"professional\", \"non-professional\"),\n      levels = c(\"professional\", \"non-professional\")),\n    type = factor(type, levels = c(\"workers\", \"jobs\")),\n  ) |>\n  ggplot(aes(x = x, y = y)) +\n  geom_sf(fill = \"#ffffff\") +\n  geom_point(aes(size = count, colour = is_prof), alpha = .5) +\n  facet_grid(is_prof ~ type) +\n  scale_colour_manual(values = c(\"#67000d\", \"#08306b\"))\n```\n:::\n\n\n\n\nThe `ggplot2` code:\n\n1. *Data*: From the derived `nodes` data frame we count workers and jobs (`type`) by borough, collapsed over professional or non-professional occupation types (`is_prof`). Note that we also start by joining on `grid` in order to bring in the polygon file and coordinates of the generated gridmap. Converting `is_prof` and `type` to factor variables gives us control over the order in which they appear in the plot. \\index{code!factors}\n2. *Encoding*: the proportional symbols are positioned at the centroids of borough grid squares (*x, y*), sized according to count of jobs or workers and coloured according to occupation type (`is_prof`).\n3. *Marks*: `geom_point()` for proportional symbols and `geom_sf()` for grid outline -- remember our dataset is now of class `sf` as we joined on the `grid` object.\n4. *Scale*: `scale_colour_manual()` for associating occupation type.\n5. *Facets*: `facet_wrap()` on workers/jobs summary type and high-level occupation type (`is_prof`). \\index{ggplot2!faceting}\n\n\nIn @fig-nodes-summary, we collapsed over nine occupation types in order to plot proportional-symbol maps. Since gridmaps consist of regularly-sized cells, we can introduce more complex graphical summaries with a geographical arrangement. For example, @fig-nodes-bars uses bar charts to analyse the number of workers (left-pointing bars) and jobs (right-pointing bars) by occupation type across the the full nine occupation classes.  In the selected examples below, jobs and workers are differentiated by varying the direction of bars: pointing to the right for jobs, to the left for workers. The counts are scaled locally. For each borough, its modal category count of jobs/workers by occupation is found, and bar length is scaled relative to this modal category. This encoding allows us to distinguish between job-rich boroughs with longer bars pointing to the right (Westminster); resident/worker-rich boroughs with longer bars pointing to the left (Wandsworth); and outer London boroughs that are more self-contained (Hillingdon).\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Workers and jobs in selected London boroughs by full occupation classes.](figs/05/nodes_bars.png){#fig-nodes-bars width=100%}\n:::\n:::\n\n\n\n\nThe code for @fig-nodes-bars:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- solution |>\n  inner_join(nodes, by = c(\"area_name\" = \"la\")) |>\n  group_by(area_name) |>\n  mutate(count = count / max(count)) |> ungroup() |>\n  mutate(\n    count = if_else(type == \"jobs\", count, -count),\n    occ_name = factor(occ_type),\n    occ_type = as.numeric(fct_rev(factor(occ_type)))\n  )\n\nplot_data |>\n  filter(area_name %in% \n    c(\"Wandsworth\", \"Westminster\", \"Bexley\", \"Hillingdon\")) |>\n  ggplot(aes(x = occ_type, y = count)) +\n  geom_col(aes(fill = is_prof), alpha = .5, width = 1) +\n  geom_hline(yintercept = 0, linewidth = .4, colour = \"#ffffff\") +\n  facet_wrap(~area_name) +\n  scale_y_continuous(limits = c(-1, 1)) +\n  scale_fill_manual(values = c(\"#08306b\", \"#67000d\"), guide = \"none\") +\n  coord_flip()\n```\n:::\n\n\n\n\nThe ggplot2 spec:\n\n1. *Data*: We create a staged dataset for plotting (`plot_data`). The different bar directions for workers/jobs is achieved by a slight hack -- changing the polarity of counts by occupation depending on the summary `type`. Additionally in this staged dataset, counts are further locally (borough-level) scaled. We `group_by` borough and express counts of jobs or workers in a borough for an occupation type relative to the largest occupation type in that borough. Note that we `filter()` on some selected boroughs.\n2. *Encoding*: Bars whose length (`y=`) varies according to `count` and categorical position (`x=)` according to `occ_type`, filled on high-level occupation type (`is_prof`).\n3. *Marks*: `geom_col()` for bars.\n4. *Scale*: `scale_fill_manual()` for associating occupation type, `scale_x_continuous()` for making sure workers/jobs bars use the same scale.\n5. *Facets*: `facet_wrap()` on borough (`area_name`). \\index{ggplot2!faceting}\n6. *Setting*: `coord_flip()` for bars that are oriented horizontally.\n\n\n Adding a geospatial arrangement, as in @fig-nodes-gridmap, can further help with exploring the geography to these different categories of borough: balanced boroughs to the east (Barking and Dagenham BaD) and west (Hillingdon Hil); worker-rich boroughs (left-pointing bars) with large proportions of professional workers in west and south west London (Wandsworth Wnd, Richmond Upon Thames RuT); job-rich boroughs (right-pointing bars) in central London (Westminster Wst, Camden Cmd).\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Workers and jobs in London boroughs by full occupation classes.](figs/05/nodes_gridmap.png){#fig-nodes-gridmap width=100%}\n:::\n:::\n\n\n\n\n\n Different from the proportional-symbol maps, the spatial arrangement in @fig-nodes-gridmap is generated using ggplot2's in-built faceting rather than a spatial polygon file. This can be understood when remembering that gridmap layouts created by `points_to_grid()` define *row* and *column* identifiers for each spatial unit. The only update to the bar chart code is that we supply *row* and *col* identifiers to `facet_grid()`, with a slight hack on the *row* variable (`-row`) as `gridmappr`’s origin *[min-row, min-col]* is the bottom-left cell in the grid whereas for `facet_grid()` the origin is the top-left. \\index{ggplot2!faceting}\n\n The code for @fig-nodes-gridmap is below, simply updating the early code with a call to `facet_grid()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data |>\n  ggplot(aes(x = occ_type, y = count)) +\n  geom_col(aes(fill = is_prof), alpha = .5, width = 1) +\n  geom_hline(yintercept = 0, linewidth = .4, colour = \"#ffffff\") +\n  facet_grid(-row ~ col, scales = \"free\") +\n  scale_y_continuous(limits = c(-1, 1)) +\n  scale_fill_manual(values = c(\"#08306b\", \"#67000d\")) +\n  coord_flip()\n```\n:::\n\n\n\n\n\n### Analysing over edges\n\n\\index{maps!OD maps|(} To study the geography of flows between boroughs, we can update our ggplot2 specification to generate a full OD map. In the example in @fig-edges-odmap, there is a little more thinking around patterns in the data that we wish to explore, borrowing from the ideas introduced in the previous chapter.\n\nWe've identified differences in where professional jobs and workers are located in London, and it is reasonable to expect that flows between boroughs also have an uneven geography. To explore this, we can set up a model that assumes that commuter flows between boroughs distribute uniformly across London. Of all commutes between London boroughs, 51% are to access *professional* jobs (`global_prof`). Under an assumption of uniformity, were we to randomly sample an OD (borough-borough) commute pair, we would expect to see this proportion  when counting up the number of professional and non-professional occupation types present in that commute. For each OD pair, we therefore generate expected counts by multiplying the total number of commuters present in an OD pair by this `global_prof`, and from here signed residuals (`resid`) identifying whether there are greater or fewer professionals commuting that OD pair than would be expected. Note that these are like the signed chi-scores \\index{Pearson residuals|(} \\index{chi-square statistic} in the previous chapter in that rather than expressing differences in observed counts as a straight proportion of expected counts (dividing by expected counts), we apply a power transform that is <1.0 to the denominator. This has the effect of also giving saliency to differences that are large in absolute terms. You could try varying this exponent (maybe between 0.5-1.0) to see its effect on residuals in the OD map. \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Commutes between London boroughs: difference maps by occupation type assuming *professionals* and *non-professionals* distribute uniformly across London.](figs/05/edges_odmap.png){#fig-edges-odmap width=100%}\n:::\n:::\n\n\n\n\n@fig-edges-odmap is a D-OD map; the large reference cells are destination boroughs (workplaces), and the small cells origins (residences) from which workers travel to access jobs in the reference cell. From this we observe that job-rich boroughs in central London are associated more with professional occupations (red cells) and draw professional commuters especially from 'residential' boroughs such as Wandsworth (Wnd), Hammersmith and Fulham (HaF). Note that the darker colours indicate that these job-rich boroughs also attract workers in large number from boroughs across London. By contrast, boroughs in outer London do not draw workers from across London in such large number, and the very dark blues in the reference cells suggest that, as might be expected, the labour market for non-professional jobs is more localised.\n\n\nThe code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges <- od_pairs |>\n  group_by(o_bor, d_bor)  |>\n  summarise(\n    commutes = sum(count),\n    is_prof = sum(count[is_prof]),\n    prop_prof= is_prof/commutes\n    ) |>\n  left_join(grid, by=c(\"o_bor\"=\"area_name\")) |> \n    st_drop_geometry() |>  select(-geom) |>\n  rename(o_x=x, o_y=y, o_col=col, o_row=row) |>\n  left_join(grid, by=c(\"d_bor\"=\"area_name\")) |> \n    st_drop_geometry() |>  select(-geom) |>\n  rename(d_x=x, d_y=y, d_col=col, d_row=row)\n\nplot_data <- edges |>\n  mutate(\n    non_prof = commutes-is_prof,\n    prof = is_prof,\n    global_prof = sum(prof) / sum(prof + non_prof),\n    count = prof + non_prof,\n    obs = prof,\n    exp = (global_prof * count),\n    resid = (obs - exp) / (exp^.7)\n    ) |>\n  # Join on d_bor for an O-OD map.\n  left_join(grid |> select(area_name), by = c(\"o_bor\" = \"area_name\")) |>\n  mutate(\n    bor_label = if_else(o_bor == d_bor, d_bor, \"\"),\n    bor_focus = o_bor == d_bor\n  ) |>\n  st_as_sf()\n\nbbox_grid <- st_bbox(grid)\nmax_resid <- max(abs(plot_data$resid))\n\nplot_data |>\n  ggplot() +\n  geom_sf(aes(fill=resid), colour = \"#616161\", \n    size = 0.15, alpha = 0.9) +\n  geom_sf(data = . %>% filter(bor_focus),\n    fill = \"transparent\", colour = \"#373737\", size = 0.3\n    ) +\n  geom_text(\n    data = plot_data %>% filter(bor_focus),\n    aes(x = bbox_grid$xmax, y = bbox_grid$ymin, \n      label = abbreviate(o_bor, 3)),\n    colour = \"#252525\", alpha = 0.9, size = 3.5,\n    hjust = \"right\", vjust = \"bottom\"\n  ) +\n  coord_sf(crs = st_crs(plot_data), datum = NA) +\n  facet_grid(-d_row ~ d_col, shrink = FALSE) +\n  scale_fill_distiller(palette = \"RdBu\", direction = -1, \n    limits=c(-max_resid, max_resid))\n```\n:::\n\n\n\n\nThe `ggplot2` spec:\n\n* Data:\n  + Calculate the proportion of professional jobs in the dataset (`global_prof`).\n  + Then for each destination (workplace) borough calculate the expected number of commutes for any OD pair by multiplying the number of jobs contained in that OD pair by `global_prof`, and express the difference between the actual number of professional jobs as a rate with a power transform (`(obs-exp) / (exp^.7)`).\n  + Take the staged dataset, and join twice on the `gridmap` dataset.\n  + Then join the with the gridded polygon file (`grid`) on `o_bor` -- in this OD map the small cells are origins.\n  + Finally, in the `mutate()` we generate a new variable identifying the borough in focus (`bor_focus`), destination in this case, and a text label variable for annotating plots (`bor_label`).\n* Encoding:\n  + Gridmap cells are coloured according to the calculated residuals (`fill=resid`).\n  + Text labels for focus (workplace) boroughs are drawn in the bottom-right corner of larger cells. Note that the coordinate space here is that from the gridmap dataset, and so the *x,y* location of borough labels is derived from the bounding box object (`bbox_grid`), calculated during data staging. \n* Marks: `geom_sf()` for drawing the small grid-cell maps; `geom_text()` for drawing the labels.\n* Scale: `scale_fill_distiller()` for a diverging colour scheme using the ColorBrewer [@harrower_colorbrewerorg_2003] `RdBu` palette and made symmetrical on 0 by manually setting `limits()` based on the maximum residual value. \\index{colour}\n* Facets: `facet_grid()` for effecting the map-within-map layout. \\index{ggplot2!faceting}\n\nOnce the data staging and `ggplot2` code for the OD map is generated, it is very easy to adapt and extend the code to explore different assumptions. For example, the expectation of a uniform distribution across London in the relative number of commutes by occupation type is a flawed one since we know that there is some variation in the proportion of professional jobs available in each borough. In the City of London (CoL) 74% of jobs are professional whereas in Bexley (Bxl), Havering (Hvr) and Barking and Dagenham (BaD), that figure is c.30%. We can easily adapt the data staging code to instead generate local expectations for each destination borough by moving the assignment of `global_prof` into a `group_by()` on destination borough.  The expectation is now that the relative number of professional commutes present in any OD pair should be proportionally equivalent to the number of professional jobs available at that OD pair's destination borough. Colouring cells of the OD map according to this new quantity (@fig-edges-odmap-borough) exposes patterns that relate to London's social geography: greater than expected *non-professional* workers from more affordable boroughs to the east of London and into job-rich boroughs in central London and a reverse pattern for origin boroughs supplying greater than expected *professional* workers.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Commutes between London boroughs: difference maps by occupation type assuming *professionals* and *non-professionals*  distribute uniformly *within* boroughs.](figs/05/edges_odmap_within.png){#fig-edges-odmap-borough width=100%}\n:::\n:::\n\n\n\n\n\\index{commuting|)} \\index{maps!gridmaps|)} \\index{Pearson residuals|)} \\index{maps!OD maps|)}\n\n## Conclusions\n\nNetwork data are challenging to represent, work with and analyse. It is for this reason that visual approaches are often used in their analysis. A common pitfall to many network visualizations is that they simply re-present that complexity without exposing useful structure or insight into the phenomena being analysed. Through an analysis of 2011 Census travel-to-work data in London, this chapter demonstrated approaches to analysing and inferring structure in a category of network data common to geographers: geospatial origin-destination data. Spatially-arranged node-link diagrams are highly intuitive and can support a kind of synoptic overview of a network, but were of limited success in representing detailed patterns in travel-to-work within and between London boroughs. Instead we used matrix-based views, including spatially arranged matrices or OD Maps. As ever, the appropriateness of either approach, node-link based or matrix-based representations, depends on data, analysis purpose and audience.\n\n\n## Further Reading\n\nFor working with network data in tidyverse and ggplot2:\n\n* Wickham, H., Navarro, D. and Lin Pedersen, T. 2023. \"ggplot2: Elegant Graphics for Data Analysis Third Edition.\", New York, NY: *Springer*.\n\n\nFor the original OD maps paper:\n\n* Wood, J., Dykes, J. and Slingsby, A. 2010. “Visualisation of Origins, Destinations and Flows with OD Maps.” *The Cartographic Journal*, 47(2): 117--29. doi: 10.1179/000870410X12658023467367.\n\nNot about network visualization per se, but presents numerous (100!) data graphics on London. Worth highlighting here is the use of annotations and efficient graphical descriptions, a theme we return to in @sec-storytelling:\n  \n* Cheshire, J. and Uberti, O. 2016 \"London, The Information Capital: 100 maps and graphics that will change how you view the city\", London, UK: *Penguin*.",
    "supporting": [
      "05-network_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{\"knit_meta_id\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"booktabs\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"longtable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"array\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"multirow\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"wrapfig\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"float\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"colortbl\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"pdflscape\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"tabu\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"threeparttable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"threeparttablex\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"ulem\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"normalem\"]},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"makecell\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"xcolor\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"booktabs\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"longtable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"array\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"multirow\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"wrapfig\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"float\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"colortbl\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"pdflscape\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"tabu\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"threeparttable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"threeparttablex\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"ulem\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"normalem\"]},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"makecell\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"xcolor\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"booktabs\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"longtable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"array\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"multirow\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"wrapfig\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"float\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"colortbl\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"pdflscape\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"tabu\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"threeparttable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"threeparttablex\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"ulem\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"normalem\"]},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"makecell\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"xcolor\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]}]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}